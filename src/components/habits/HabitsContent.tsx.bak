'use client'

import React, { useState, useCallback, useRef, useEffect } from 'react';
import { useThemeColors } from '@/hooks/useThemeColor';
import { useLocalization } from '@/hooks/useLocalization';
import { useRouter } from 'next/navigation';
import { Habit, HabitStats } from '@/types/habit';
import HabitItem from './HabitItem';
import { Plus, RefreshCw } from 'lucide-react';

// 模拟API调用 - 在实际项目中应该替换为真实的API
const mockHabits: Habit[] = [
  {
    id: 1,
    userId: '1',
    title: '每日阅读',
    icon: 'book',
    color: '#4A90E2',
    frequency: 'daily',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
    todayCount: 1,
    isCompletedToday: true
  },
  {
    id: 2,
    userId: '1',
    title: '健身运动',
    icon: 'fitness',
    color: '#50E3C2',
    frequency: 'daily',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
    todayCount: 0,
    isCompletedToday: false
  },
  {
    id: 3,
    userId: '1',
    title: '喝水打卡',
    icon: 'water',
    color: '#F5A623',
    frequency: 'daily',
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
    todayCount: 3,
    isCompletedToday: true
  }
];

const mockStats: Record<number, HabitStats> = {
  1: {
    completedDays: 25,
    currentStreak: 5,
    longestStreak: 12,
    completionRate: 0.8,
    heatmap: {
      '2024-01-01': 1,
      '2024-01-02': 1,
      '2024-01-03': 1,
      '2024-01-05': 1,
      '2024-01-06': 1
    }
  },
  2: {
    completedDays: 18,
    currentStreak: 0,
    longestStreak: 8,
    completionRate: 0.6,
    heatmap: {
      '2024-01-01': 1,
      '2024-01-03': 1,
      '2024-01-04': 1
    }
  },
  3: {
    completedDays: 30,
    currentStreak: 15,
    longestStreak: 20,
    completionRate: 0.95,
    heatmap: {
      '2024-01-01': 3,
      '2024-01-02': 2,
      '2024-01-03': 4,
      '2024-01-04': 3,
      '2024-01-05': 2,
      '2024-01-06': 1
    }
  }
};

export default function HabitsContent() {
  const colors = useThemeColors();
  const { t } = useLocalization();
  const router = useRouter();
  const [habits, setHabits] = useState<Habit[]>([]);
  const [allHabitsStats, setAllHabitsStats] = useState<Record<number, HabitStats>>({});
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const hasLoadedInitially = useRef(false);

  // 模拟数据加载
  const loadHabits = useCallback(async () => {
    try {
      // 模拟API延迟
      await new Promise(resolve => setTimeout(resolve, 500));
      setHabits(mockHabits);
      setAllHabitsStats(mockStats);
    } catch (error) {
      console.error('加载习惯失败:', error);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  }, []);

  // 初始加载
  useEffect(() => {
    if (!hasLoadedInitially.current) {
      loadHabits();
      hasLoadedInitially.current = true;
    }
  }, [loadHabits]);

  const handleRefresh = useCallback(() => {
    setRefreshing(true);
    loadHabits();
  }, [loadHabits]);

  // 处理增加打卡
  const handleIncrement = useCallback(async (habitId: number) => {
    try {
      // 模拟API调用
      await new Promise(resolve => setTimeout(resolve, 200));

      // 乐观更新UI状态
      setHabits(prev => prev.map(h =>
        h.id === habitId ? {
          ...h,
          todayCount: (h.todayCount || 0) + 1,
          isCompletedToday: true
        } : h
      ));

      console.log(`习惯 ${habitId} 打卡成功`);
    } catch (err) {
      console.error('打卡失败', err);
    }
  }, []);

  // 处理减少打卡
  const handleDecrement = useCallback(async (habitId: number) => {
    try {
      // 模拟API调用
      await new Promise(resolve => setTimeout(resolve, 200));

      // 乐观更新UI状态
      setHabits(prev => prev.map(h => {
        if (h.id === habitId) {
          const newCount = Math.max(0, (h.todayCount || 0) - 1);
          return {
            ...h,
            todayCount: newCount,
            isCompletedToday: newCount > 0
          };
        }
        return h;
      }));

      console.log(`习惯 ${habitId} 打卡减少成功`);
    } catch (err) {
      console.error('减少打卡失败', err);
    }
  }, []);

  const handleHabitPress = useCallback((habit: Habit) => {
    console.log('点击习惯:', habit.title);
    // TODO: 导航到习惯详情页
  }, []);

  const handleAddHabit = useCallback(() => {
    console.log('添加新习惯');
    // TODO: 导航到习惯创建页面
  }, []);

  if (loading) {
    return (
      <div className="flex-1 flex items-center justify-center" style={{ backgroundColor: colors.background }}>
        <RefreshCw className="animate-spin" size={24} color={colors.tint} />
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full" style={{ backgroundColor: colors.background }}>
      {/* 头部 */}
      <div className="flex items-center justify-between px-6 border-b h-[64px]" style={{ borderColor: colors.border }}>
        <h1 className="text-xl font-semibold" style={{ color: colors.text }}>
          {t('habits.title')}
        </h1>
        <button
          onClick={handleAddHabit}
          className="w-11 h-11 flex items-center justify-center rounded-full transition-colors duration-200 hover:bg-opacity-10 hover:bg-black"
          style={{ color: colors.tint }}
        >
          <Plus size={20} />
        </button>
      </div>

      {/* 内容区域 */}
      <div className="flex-1 overflow-auto">
        <div className="max-w-4xl mx-auto">
          {habits.length === 0 ? (
            <div className="flex-1 flex flex-col items-center justify-center py-8">
              <span className="text-6xl mb-4 opacity-50">⭐️</span>
              <h3 className="text-lg font-medium mb-2" style={{ color: colors.textSecondary }}>
                {t('habits.empty_title')}
              </h3>
              <p className="text-sm text-center opacity-50" style={{ color: colors.textSecondary }}>
                {t('habits.empty_subtitle')}
              </p>
            </div>
          ) : (
            <div className="py-3">
              {habits.map((habit) => (
                <HabitItem
                  key={habit.id}
                  habit={habit}
                  onIncrement={handleIncrement}
                  onDecrement={handleDecrement}
                  onPress={() => handleHabitPress(habit)}
                  stats={allHabitsStats[habit.id]}
                />
              ))}
            </div>
          )}
        </div>
      </div>

      {/* 下拉刷新指示器 */}
      {refreshing && (
        <div className="absolute top-16 left-1/2 transform -translate-x-1/2 z-10">
          <RefreshCw className="animate-spin" size={20} color={colors.tint} />
        </div>
      )}
    </div>
  );
}